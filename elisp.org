* Изучение emacs lisp
** Обработка списка
*** Списки Lisp

#+begin_src lisp
  '(rosa violet daisy buttercup)
  
  ;; также можно записать так
  '(rosa
    violet
    daisy
    buttercup)
#+end_src

*** Число, списки внути списков

#+begin_src lisp
  '(Этот список имеет (список внутри себя))
#+end_src

Это пустой список - ()

*** Атомы
В Lisp то, что мы называли словами, называется атомами . Этот термин происходит от исторического значения слова атом, которое означает «неделимый».
Что касается Lisp, слова, которые мы использовали в списках, не могут быть разделены на какие-либо меньшие части и по-прежнему означают то же самое как часть программы;
то же самое с числами и односимвольными символами, такими как '+'. С другой стороны, в отличие от древнего атома, список можно разделить на части. (См. car cdr& consОсновные функции .)

В списке атомы отделены друг от друга пробелом. Они могут располагаться прямо рядом с скобкой.

Технически говоря, список в Lisp состоит из скобок, окружающих атомы, разделенные пробелами, или окружающих другие списки, или окружающих как атомы, так и другие списки.
Список может содержать только один атом или вообще ничего не содержать. Список, в котором ничего нет, выглядит так: ()и называется пустым списком .
В отличие от всего остального, пустой список считается и атомом, и списком одновременно.

Печатное представление как атомов, так и списков называется символическими выражениями или, короче, s-выражениями .
Слово выражение само по себе может относиться либо к печатному представлению, либо к атому или списку, поскольку они хранятся внутри компьютера.
Часто люди используют термин выражение без разбора. (Кроме того, во многих текстах слово форма используется как синоним выражения.)

Кстати, атомы, из которых состоит наша вселенная, были названы так, когда их считали неделимыми; но было обнаружено, что физические атомы не являются неделимыми.
Части могут расщепляться от атома или он может делиться на две части примерно одинакового размера.
Физические атомы были названы преждевременно, до того, как была обнаружена их истинная природа.
В Lisp некоторые виды атомов, такие как массив, могут быть разделены на части; но механизм для этого отличается от механизма для разделения списка.
Что касается операций со списками, атомы списка неразделимы.


#+begin_src lisp
  '(этот список включает «текст в кавычках».)
#+end_src

Пробелы не имеют значения в списках. С точки зрения Лисп
#+begin_src lisp
      '(this lisp
  	   view)
#+end_src

** Запуск программы
Но если перед списком нет кавычек, первый элемент списка является особым: это команда для компьютера, которой нужно подчиняться.
(В Lisp эти команды называются функциями(+ 2 2) .) Перед списком, показанным выше, не было кавычек, поэтому Lisp понимает,
что (+) это инструкция что-то сделать с остальной частью списка: сложить следующие числа.

#+begin_src lisp
  (+ 2 2)
#+end_src

Чтобы оценить это вырожение нужно в конце строки нажать C-x C-e
#+begin_src
  '(это цитируемый список)
#+end_src


В этом случае Интерпретатор emacs запустить на выполнение данную команду

** Сообщение об ошибках

При возникновении ошибки будет Произведена обратная трасировка

** Интерпретатор Lisp
На основе увиденного мы теперь можем начать выяснять, что делает интерпретатор Lisp, когда мы даем ему команду оценить список.
Во-первых, он смотрит, есть ли кавычки перед списком; если есть, интерпретатор просто выдает нам список.
С другой стороны, если кавычек нет, интерпретатор смотрит на первый элемент в списке и смотрит, есть ли у него определение функции.
Если есть, интерпретатор выполняет инструкции в определении функции. В противном случае интерпретатор выводит сообщение об ошибке.

Базовый ситнаксис:
#+begin_src lisp
  (defun the-meating-of-life (answer)
    (message "The answer is %s" answer))

  (list 1 2 3
  	  4 5 6
  	  7 8 9)
#+end_src

Лисп типы данных:

- Строки
- Числа (int and float)
- Символы
- Константы
- Мыссивы и векторы
- и другие


#+begin_src lisp
  ;; Primitives are usually self-evaluating
  54

  "Hello !"

  ;; array
  [1 2 (+ 1 2)]

  ;; not self-evaluating!
  buffer-file-name

  ;;Evaluates a function!
  (+ 300 11)

  ;; infix vs Previx
  (+ 300 (- 12 1))

#+end_src

** Переменные

Переменная fill-columnиллюстрирует символ с прикрепленным к нему значением: в каждом буфере GNU Emacs этот символ установлен в некоторое значение,
обычно 72 или 70, но иногда и в некоторое другое значение. Чтобы найти значение этого символа, вычислите его самого.
Если вы читаете это в Info внутри GNU Emacs, вы можете сделать это, поместив курсор после символа и набрав C-x C-e:

#+begin_src lisp
  fill-column
#+end_src

** Базовые операции lisp/elisp
В Lisp базовые операции включают в себя несколько ключевых элементов, которые позволяют выполнять вычисления и манипуляции с данными. Вот некоторые из них:

1) **Арифметические операции**:
   - `+` — сложение
   - `-` — вычитание
   - `*` — умножение
   - `/` — деление

   Пример:
   #+begin_src lisp
   (+ 1 2)
   (- 5 3) 
   #+end_src


2) **Логические операции**:
   - `and` — логическое И
   - `or` — логическое ИЛИ
   - `not` — логическое НЕ

   Пример:
   #+begin_src lisp
   (and t nil) ; результат: nil
   (or nil t)  ; результат: t
   #+end_src

   

3) **Сравнение**:
   - `=` — равенство
   - `<` — меньше
   - `>` — больше
   - `<=` — меньше или равно
   - `>=` — больше или равно

   Пример:
   #+begin_src lisp
   (< 3 5) ; результат: t
   (= 2 2) ; результат: t
   #+end_src

4) **Работа с списками**:
   - `car` — возвращает первый элемент списка
   - `cdr` — возвращает список без первого элемента
   - `cons` — добавляет элемент в начало списка
   - `list` — создает список

   Пример:
   #+begin_src lisp
   (car '(1 2 3)) ; результат: 1
   (cdr '(1 2 3)) ; результат: (2 3)
   (cons 0 '(1 2 3)) ; результат: (0 1 2 3)
   #+end_src

5) **Условные выражения**:
   - `if` — условное выражение
   - `cond` — множественные условия

   Пример:
   #+begin_src
   (if (> 3 2)
       'greater
       'lesser) ; результат: 'greater

   (cond ((> 3 2) 'greater)
         ((< 3 2) 'lesser)
         (t 'equal)) ; результат: 'greater     
   #+end_src

6) **Функции**:
   - Определение функций с помощью `defun`.

   Пример:
   #+begin_src
   (defun square (x)
     (* x x)) ; функция, возвращающая квадрат числа     
   #+end_src
   
Эти операции составляют основу программирования на Lisp и позволяют создавать более сложные конструкции и алгоритмы.

* Изучение emacs lisp
** Обработка списка
*** Списки Lisp

#+begin_src lisp
  '(rosa violet daisy buttercup)
  
  ;; также можно записать так
  '(rosa
    violet
    daisy
    buttercup)
#+end_src

*** Число, списки внути списков

#+begin_src lisp
  '(Этот список имеет (список внутри себя))
#+end_src

Это пустой список - ()

*** Атомы
В Lisp то, что мы называли словами, называется атомами . Этот термин происходит от исторического значения слова атом, которое означает «неделимый».
Что касается Lisp, слова, которые мы использовали в списках, не могут быть разделены на какие-либо меньшие части и по-прежнему означают то же самое как часть программы;
то же самое с числами и односимвольными символами, такими как '+'. С другой стороны, в отличие от древнего атома, список можно разделить на части. (См. car cdr& consОсновные функции .)

В списке атомы отделены друг от друга пробелом. Они могут располагаться прямо рядом с скобкой.

Технически говоря, список в Lisp состоит из скобок, окружающих атомы, разделенные пробелами, или окружающих другие списки, или окружающих как атомы, так и другие списки.
Список может содержать только один атом или вообще ничего не содержать. Список, в котором ничего нет, выглядит так: ()и называется пустым списком .
В отличие от всего остального, пустой список считается и атомом, и списком одновременно.

Печатное представление как атомов, так и списков называется символическими выражениями или, короче, s-выражениями .
Слово выражение само по себе может относиться либо к печатному представлению, либо к атому или списку, поскольку они хранятся внутри компьютера.
Часто люди используют термин выражение без разбора. (Кроме того, во многих текстах слово форма используется как синоним выражения.)

Кстати, атомы, из которых состоит наша вселенная, были названы так, когда их считали неделимыми; но было обнаружено, что физические атомы не являются неделимыми.
Части могут расщепляться от атома или он может делиться на две части примерно одинакового размера.
Физические атомы были названы преждевременно, до того, как была обнаружена их истинная природа.
В Lisp некоторые виды атомов, такие как массив, могут быть разделены на части; но механизм для этого отличается от механизма для разделения списка.
Что касается операций со списками, атомы списка неразделимы.


#+begin_src lisp
  '(этот список включает «текст в кавычках».)
#+end_src

Пробелы не имеют значения в списках. С точки зрения Лисп
#+begin_src lisp
      '(this lisp
  	   view)
#+end_src

** Запуск программы
Но если перед списком нет кавычек, первый элемент списка является особым: это команда для компьютера, которой нужно подчиняться.
(В Lisp эти команды называются функциями(+ 2 2) .) Перед списком, показанным выше, не было кавычек, поэтому Lisp понимает,
что (+) это инструкция что-то сделать с остальной частью списка: сложить следующие числа.

#+begin_src lisp
  (+ 2 2)
#+end_src

Чтобы оценить это вырожение нужно в конце строки нажать C-x C-e
#+begin_src
  '(это цитируемый список)
#+end_src


В этом случае Интерпретатор emacs запустить на выполнение данную команду

** Сообщение об ошибках

При возникновении ошибки будет Произведена обратная трасировка

** Интерпретатор Lis
На основе увиденного мы теперь можем начать выяснять, что делает интерпретатор Lisp, когда мы даем ему команду оценить список.
Во-первых, он смотрит, есть ли кавычки перед списком; если есть, интерпретатор просто выдает нам список.
С другой стороны, если кавычек нет, интерпретатор смотрит на первый элемент в списке и смотрит, есть ли у него определение функции.
Если есть, интерпретатор выполняет инструкции в определении функции. В противном случае интерпретатор выводит сообщение об ошибке.
